---
const title = "学校祭 食事予約システム - 店舗選択";
---

<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title}</title>
  <style>
    :root {
      --primary-color: #4CAF50;
      --primary-hover: #45a049;
      --secondary-color: #FFC107;
      --background-color: #f5f5f5;
      --card-background: #ffffff;
      --text-color: #333333;
      --border-color: #ddd;
      --error-color: #f44336;
      --success-color: #4CAF50;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Hiragino Sans', 'Noto Sans CJK JP', sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
      color: var(--text-color);
    }

    .container {
      max-width: 800px;
      margin: 0 auto;
      background: var(--card-background);
      border-radius: 15px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }

    .header {
      background: var(--primary-color);
      color: white;
      padding: 30px;
      text-align: center;
    }

    .header h1 {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 10px;
    }

    .header p {
      font-size: 1.1rem;
      opacity: 0.9;
    }

    .form-container {
      padding: 40px;
    }

    .form-group {
      margin-bottom: 25px;
    }

    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: var(--text-color);
    }

    .required {
      color: var(--error-color);
    }

    .form-group input,
    .form-group select,
    .form-group textarea {
      width: 100%;
      padding: 12px 16px;
      border: 2px solid var(--border-color);
      border-radius: 8px;
      font-size: 16px;
      transition: border-color 0.3s ease;
    }

    .form-group input:focus,
    .form-group select:focus,
    .form-group textarea:focus {
      outline: none;
      border-color: var(--primary-color);
    }

    .form-group textarea {
      resize: vertical;
      min-height: 100px;
    }

    .form-row {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
    }

    .stores-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 30px;
      margin-top: 40px;
    }

    .store-card {
      background: var(--card-background);
      border: 3px solid var(--border-color);
      border-radius: 15px;
      padding: 30px;
      cursor: pointer;
      transition: all 0.3s ease;
      text-align: center;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .store-card:hover {
      border-color: var(--primary-color);
      transform: translateY(-5px);
      box-shadow: 0 8px 25px rgba(76, 175, 80, 0.3);
    }

    .store-card h2 {
      font-size: 1.8rem;
      margin-bottom: 15px;
      color: var(--primary-color);
    }

    .store-card p {
      font-size: 1.1rem;
      color: #666;
      margin-bottom: 20px;
    }

    .store-info {
      margin-bottom: 20px;
    }

    .store-info .menu-count {
      color: var(--secondary-color);
      font-weight: 600;
      margin-bottom: 5px;
    }

    .store-info .time-info {
      color: #888;
      font-size: 0.9rem;
    }

    .select-btn {
      background: var(--primary-color);
      color: white;
      border: none;
      padding: 12px 25px;
      border-radius: 25px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    .select-btn:hover {
      background: var(--primary-hover);
    }

    .menu-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
      margin-top: 15px;
    }

    .menu-item {
      border: 2px solid var(--border-color);
      border-radius: 8px;
      padding: 15px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .menu-item:hover {
      border-color: var(--secondary-color);
      transform: translateY(-1px);
    }

    .menu-item.selected {
      border-color: var(--secondary-color);
      background-color: rgba(255, 193, 7, 0.1);
    }

    .menu-item h4 {
      font-size: 1rem;
      margin-bottom: 5px;
    }

    .menu-item .price {
      font-weight: bold;
      color: var(--secondary-color);
      font-size: 1.1rem;
    }

    .time-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
      gap: 10px;
      margin-top: 15px;
    }

    .time-slot {
      border: 2px solid var(--border-color);
      border-radius: 6px;
      padding: 10px;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }

    .time-slot:hover {
      border-color: var(--primary-color);
      background-color: rgba(76, 175, 80, 0.1);
    }

    .time-slot.selected {
      border-color: var(--primary-color);
      background-color: var(--primary-color);
      color: white;
    }

    .submit-btn {
      width: 100%;
      background: var(--primary-color);
      color: white;
      border: none;
      padding: 16px 24px;
      font-size: 1.1rem;
      font-weight: 600;
      border-radius: 8px;
      cursor: pointer;
      transition: background-color 0.3s ease;
      margin-top: 30px;
    }

    .submit-btn:hover {
      background: var(--primary-hover);
    }

    .submit-btn:disabled {
      background: #ccc;
      cursor: not-allowed;
    }

    .message {
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 20px;
      font-weight: 500;
    }

    .message.error {
      background-color: #ffebee;
      color: var(--error-color);
      border: 1px solid #ffcdd2;
    }

    .message.success {
      background-color: #e8f5e8;
      color: var(--success-color);
      border: 1px solid #c8e6c9;
    }

    .hidden {
      display: none !important;
    }

    @media (max-width: 768px) {
      .form-row {
        grid-template-columns: 1fr;
      }
      
      .store-selection {
        grid-template-columns: 1fr;
      }
      
      .menu-grid {
        grid-template-columns: 1fr;
      }
      
      .time-grid {
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
      }
      
      .header h1 {
        font-size: 2rem;
      }
      
      .form-container {
        padding: 20px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>🎪 学校祭 食事予約</h1>
      <p>ご利用になりたい店舗をお選びください</p>
    </div>

    <div class="form-container">
      <div class="stores-grid" id="storesGrid">
        <!-- 店舗カードがここに動的に追加されます -->
      </div>
    </div>
  </div>

  <script>
    interface Store {
      id: string;
      name: string;
      description: string;
      menus: Array<{
        id: string;
        name: string;
        price: number;
      }>;
      timeSlots: string[];
    }

    let stores: Store[] = [];

    // ページ読み込み時に店舗データを取得
    async function loadStores(): Promise<void> {
      try {
        const response = await fetch('/api/stores');
        const data = await response.json();
        stores = data.stores;
        renderStores();
      } catch (error) {
        console.error('店舗データの読み込みに失敗しました:', error);
      }
    }

    // 店舗カードを表示
    function renderStores(): void {
      const container = document.getElementById('storesGrid');
      if (!container) return;
      
      container.innerHTML = '';

      stores.forEach((store: Store) => {
        const storeCard = document.createElement('div');
        storeCard.className = 'store-card';
        storeCard.innerHTML = `
          <h2>${store.name}</h2>
          <p>${store.description}</p>
          <div class="store-info">
            <div class="menu-count">${store.menus.length}種類のメニュー</div>
            <div class="time-info">${store.timeSlots.length}つの時間帯</div>
          </div>
          <button class="select-btn" onclick="selectStore('${store.id}')">
            この店舗で予約する
          </button>
        `;
        container.appendChild(storeCard);
      });
    }

    // 店舗選択
    function selectStore(storeId: string): void {
      // 選択した店舗の予約ページにリダイレクト
      window.location.href = `/reserve/${storeId}`;
    }

    // ページ読み込み時に店舗データを読み込み
    loadStores();

    // グローバル関数として登録
    (window as any).selectStore = selectStore;
  </script>
</body>
</html>
